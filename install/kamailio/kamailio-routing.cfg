request_route {
        route(REQINIT);

        if (is_method("CANCEL")) {
                if (t_check_trans()) {
                        route(RELAY);
                }
                exit;
        }

        if (is_method("INVITE") || is_method("REGISTER")) {
                route(NAT);
        }

        if (is_method("REGISTER")) {
                # v1 API AUTH request route
                # route(RELAY_API);

                # v2 API AUTH request async route
                async_task_route("RELAY_API");

                # v3 AUTH with DB
                # route(AUTH);
        }

        route(DIALOG);
}

route[REQINIT] {
        force_rport;

        if (!mf_process_maxfwd_header("10")) {
		xlog("L_INFO", "Too Many Hops\n");
		send_reply("483", "Too Many Hops");
		exit;
	}
}

route[RELAY_API]{
        $http_req(all) = $null;
        $http_req(suspend) = 1;
        $http_req(timeout) = "5000";
        $http_req(method) = "POST";
        $http_req(hdr) = "Content-Type: application/json";
        # if token exist
        $http_req(hdr) = "Authorization: Bearer "+KAMAILIO_API_AUTH_TOKEN;

        jansson_set("string", "event", "sip-routing", "$var(http_routing_query)");
        jansson_set("string", "source_ip", $avp(source_ip), "$var(http_routing_query)");
        jansson_set("int", "source_port", $avp(source_port), "$var(http_routing_query)");
        jansson_set("int", "auth", 0, "$var(http_routing_query)");
        jansson_set("string", "call_id", $ci, "$var(http_routing_query)");
        jansson_set("string", "from_name", $fn, "$var(http_routing_query)");
        jansson_set("string", "from_uri", $fu, "$var(http_routing_query)");
        jansson_set("string", "from_tag", $ft, "$var(http_routing_query)");
        jansson_set("string", "to_name", $tn, "$var(http_routing_query)");
        jansson_set("string", "to_uri", $tu, "$var(http_routing_query)");
        jansson_set("string", "to_tag", $tt, "$var(http_routing_query)");
        jansson_set("string", "ua", $ua, "$var(http_routing_query)");

        xlog("L_INFO","API ASYNC ROUTING REQUEST: $var(http_routing_query)\n");

        $http_req(body) = $var(http_routing_query);
        t_newtran();

        http_async_query(KAMAILIO_API_AUTH_URL, "RELAY_API_RESPONSE");
}

route[RELAY_API_RESPONSE] {
        if ($http_ok && $http_rs == 200) {
                xlog("L_INFO", "| AUTH API RESPONSE: $http_rb\n");

                if(jansson_get("ha1", $http_rb, "$avp(hash1)")) {
                xlog("L_INFO", "API RESP hash>>> $avp(hash1)");

        if (!pv_auth_check("$fd", "$avp(hash1)", "1", "0")) {
                xlog("L_INFO", "|AUTH API RESPONSE | not_pv_auth_check");
                # force_rport();
                auth_challenge("$fd", "0");
                exit;
        } else {
                xlog("L_INFO", "|AUTH API RESPONSE | consume_credentials");
                consume_credentials();
                save("location");
                exit;
        }
        }

        save("location");
        } else {
                xlog("L_INFO", "Auth API Not Available");
                send_reply(503, "Auth API Not Available");
        }

        exit();
}

route[AUTH] {
        if (is_method("REGISTER")){                             # authenticate requests
                if (!auth_check("$fd", "subscriber", "1")) {    #If credentials don't match what we have in Subscriber table
                        force_rport();
                        auth_challenge("$fd", "0");             #Send an Auth Challenge
                        exit();                                 #Stop processing
                }


                save("location");                               #Save the location as an AoR
                exit;                                           #Stop processing
        }

        if ((is_method("INVITE"))){
                if(!allow_source_address("200")){
                     sl_reply("403", "Nope. Don't know who you are"); 
                     exit();   
                } else {
                        return;
                        }               
        }
}

route[NAT] {
        if (nat_uac_test("19")) {
                if (is_method("REGISTER")) {
                        set_contact_alias();
                } else {
                        if(is_first_hop()) {
                                set_contact_alias();
                        }
                }
        }
        return;
}

route[DIALOG] {
        if (is_method("INVITE")) {
                route(AUTH);

                if (!lookup("location")) {                      # Try looking up location
                        sl_send_reply("403", "Forbidden");      # If looking up location fails reply with 404
                        exit;                                   # And exit
                }

                handle_ruri_alias();
                record_route();
                route(RELAY);
        }

        if (has_totag()) {
                if (loose_route()) {
                        handle_ruri_alias();
                        route(RELAY);
                }
        }

        if (is_method("ACK")) {
                if ( t_check_trans() ) {
                        route(RELAY);
                        exit;
                } else {
                        exit;
                }
        }
}
 
route[RELAY] {
        if (has_body("application/sdp")) {
                rtpengine_manage("replace-session-connection replace-origin ICE=remove direction=internal direction=external");
        }

        t_on_reply("REPLY");
        t_relay();
}
 
onreply_route[REPLY] {
        route(NAT);

        if (has_body("application/sdp")) {
                rtpengine_manage("replace-session-connection replace-origin ICE=remove direction=internal direction=external");
        }
}