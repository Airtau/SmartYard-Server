request_route {
        route(REQINIT);

        if (is_method("CANCEL")) {
                if (t_check_trans()) {
                        route(RELAY);
                }
                exit;
        }

        if (is_method("INVITE") || is_method("REGISTER")) {
                route(NAT);
        }

        if (is_method("REGISTER")) {
                route(AUTH);
        }

        route(DIALOG);
}

route[REQINIT] {
        force_rport;

        if (!mf_process_maxfwd_header("10")) {
		xlog("L_INFO", "Too Many Hops\n");
		send_reply("483", "Too Many Hops");
		exit;
	}
}

route[AUTH] {
        if (is_method("REGISTER")){                             # authenticate requests
                if (!auth_check("$fd", "subscriber", "1")) {    #If credentials don't match what we have in Subscriber table
                        force_rport();
                        auth_challenge("$fd", "0");             #Send an Auth Challenge
                        exit();                                 #Stop processing
                }


                save("location");                               #Save the location as an AoR
                exit;                                           #Stop processing
        }

        if ((is_method("INVITE"))){
                if(!allow_source_address("200")){
                     sl_reply("403", "Nope. Don't know who you are"); 
                     exit();   
                } else {
                        return;
                        }               
        }
}

route[NAT] {
        if (nat_uac_test("19")) {
                if (is_method("REGISTER")) {
                        set_contact_alias();
                } else {
                        if(is_first_hop()) {
                                set_contact_alias();
                        }
                }
        }
        return;
}

route[DIALOG] {
        if (is_method("INVITE")) {
                route(AUTH);

                if (!lookup("location")) {                      # Try looking up location
                        sl_send_reply("403", "Forbidden");      # If looking up location fails reply with 404
                        exit;                                   # And exit
                }

                handle_ruri_alias();
                record_route();
                route(RELAY);
        }

        if (has_totag()) {
                if (loose_route()) {
                        handle_ruri_alias();
                        route(RELAY);
                }
        }

        if (is_method("ACK")) {
                if ( t_check_trans() ) {
                        route(RELAY);
                        exit;
                } else {
                        exit;
                }
        }
}
 
route[RELAY] {
        if (has_body("application/sdp")) {
                rtpengine_manage("replace-session-connection replace-origin ICE=remove direction=internal direction=external");
        }

        t_on_reply("REPLY");
        t_relay();
}
 
onreply_route[REPLY] {
        route(NAT);

        if (has_body("application/sdp")) {
                rtpengine_manage("replace-session-connection replace-origin ICE=remove direction=internal direction=external");
        }
}