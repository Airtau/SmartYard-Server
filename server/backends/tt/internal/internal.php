<?php

    /**
     * backends tt namespace
     */

    namespace backends\tt {

        /**
         * internal.db tt class
         */

        class internal extends tt {

            public function allow($params)
            {
                return true;
            }

            public function capabilities()
            {
                return [
                    "mode" => "rw",
                ];
            }

            public function cleanup()
            {
                return parent::cleanup(); // TODO: Change the autogenerated stub
            }

            /**
             * get projects
             *
             * @return false|array[]
             */
            public function getProjects()
            {
                try {
                    $projects = $this->db->query("select project_id, acronym, project, workflow, version from tt_projects order by acronym", \PDO::FETCH_ASSOC)->fetchAll();
                    $_projects = [];

                    foreach ($projects as $project) {
                        $_projects[] = [
                            "projectId" => $project["project_id"],
                            "acronym" => $project["acronym"],
                            "project" => $project["project"],
                            "workflow" => $project["workflow"],
                            "version" => $project["version"],
                        ];
                    }

                    return $_projects;
                } catch (\Exception $e) {
                    return false;
                }
            }

            /**
             * get project, if $project_id is false, returns all projects
             *
             * @param $projectId integer project_id
             * @return false|array
             */
            public function getProject($projectId)
            {
                if (!checkInt($projectId)) {
                    return false;
                }

                try {
                    $project = $this->db->query("select project_id, acronym, project, workflow, version from tt_projects where project_id = $projectId", \PDO::FETCH_ASSOC)->fetchAll();

                    if (count($project)) {
                        return [
                            "projectId" => $project[0]["project_id"],
                            "acronym" => $project[0]["acronym"],
                            "project" => $project[0]["project"],
                            "workflow" => $project[0]["workflow"],
                            "version" => $project[0]["version"],
                        ];

                    } else {
                        return false;
                    }
                } catch (\Exception $e) {
                    error_log(print_r($e, true));
                    return false;
                }
            }

            /**
             * @param $acronym
             * @param $project
             * @param $workflow
             *
             * @return false|integer
             */
            public function addProject($acronym, $project, $workflowName)
            {
                $acronym = trim($acronym);
                $project = trim($project);

                try {
                    $workflow = $this->loadWorkflow($workflowName);

                    if ($workflow) {
                        $sth = $this->db->prepare("insert into tt_projects (acronym, project, workflow, version) values (:acronym, :project, :workflow, 0)");
                        if (!$sth->execute([
                            ":acronym" => $acronym,
                            ":project" => $project,
                            ":workflow" => $workflowName,
                        ])) {
                            return false;
                        }

                        $projectId = $this->db->lastInsertId();

                        $workflow->initProject($projectId);

                        return $projectId;
                    } else {
                        error_log("workflow ($workflowName) load fail!");
                        return false;
                    }

                } catch (\Exception $e) {
                    error_log(print_r($e, true));
                    return false;
                }
            }

            /**
             * @param $projectId integer
             * @param $acronym string
             * @param $project string
             * @return boolean
             */
            public function modifyProject($projectId, $acronym, $project)
            {
                error_log(dirname(__FILE__));
                
                if (!checkInt($projectId) || !trim($acronym) || !trim($project)) {
                    return false;
                }

                try {
                    $sth = $this->db->prepare("update tt_projects set acronym = :acronym, project = :project where project_id = $projectId");
                    $sth->execute([
                        ":acronym" => $acronym,
                        ":project" => $project,
                    ]);
                } catch (\Exception $e) {
                    error_log(print_r($e, true));
                    return false;
                }

                return true;
            }

            /**
             * delete project and all it derivatives
             *
             * @param $projectId
             * @return boolean
             */
            public function deleteProject($projectId)
            {
                if (!checkInt($projectId)) {
                    return false;
                }

                try {
                    $this->db->exec("delete from tt_projects where project_id = $projectId");
                    // TODO: delete all derivatives
                } catch (\Exception $e) {
                    error_log(print_r($e, true));
                    return false;
                }

                return true;
            }
        }
    }
